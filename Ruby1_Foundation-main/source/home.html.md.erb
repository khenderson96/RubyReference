---
title: Ruby Basics
---

#Ruby Basics

###Dynamically typed
Ruby performs type checking at run time. Objects have types, while variables do not.

###Strongly typed
Ruby only allows certain operations on certain data types. The class of an object determines what operations may be performed.

###Imperative and object oriented
Everything is treated as an object via classes and instances. Supports inheritance.

###Ruby conventions
* Omit ; at the end of a statement
* Omit ()'s on function calls
* Omit {}'s on blocks. Instead use 'end' keyword to delimit blocks
* Use snake_case for variables, symbols, and methods
* Use CamelCase for classes and modules
* Single line comments begin with #, multiline comment bracketed by '=begin...=end's
* Indicate result of a statement using #=>

###Operators
* Arithmetic: + - * / % ** += -= *= /= %= **=
* Bitwise: ~ | & ^ << >>
* Comparison: < > <= >= <=>
* Logical: && || ! and or not ||= &&=

###Common keywords

| def    | do     | else   | elsif  | end    | next   | nil    |
not    | return | unless | until  | while  | yield  |<%= link_to "full list", "https://docs.ruby-lang.org/en/2.2.0/keywords_rdoc.html"%> |
&nbsp;

